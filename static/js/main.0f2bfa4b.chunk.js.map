{"version":3,"sources":["containers/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","state","search","sortAsc","employees","filteredEmployees","sortEmployees","sortedEmployees","sort","a","b","name","first","setState","handleSubmit","event","preventDefault","filterEmployees","handleInputChange","target","value","searchTerm","toLowerCase","filter","employee","includes","axios","get","then","response","console","log","data","results","className","onSubmit","this","type","placeholder","onChange","scope","onClick","map","picture","thumbnail","phone","email","dob","date","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0RA8HeA,E,4MA1HbC,MAAQ,CACNC,OAAQ,GACRC,SAAS,EACTC,UAAW,GACXC,kBAAmB,I,EAcrBC,cAAgB,WAad,GAAI,EAAKL,MAAME,QAAS,CACtB,IAAMI,EAAkB,EAAKN,MAAMI,kBAAkBG,MAbvD,SAAoBC,EAAGC,GACrB,OAAID,EAAEE,KAAKC,MAAQF,EAAEC,KAAKC,MAAc,EACpCF,EAAEC,KAAKC,MAAQH,EAAEE,KAAKC,OAAe,EAElC,KAWP,EAAKC,SAAS,CACZR,kBAAmBE,EACnBJ,SAAS,QAEN,CACL,IAAMI,EAAkB,EAAKN,MAAMI,kBAAkBG,MAdvD,SAAqBC,EAAGC,GACtB,OAAID,EAAEE,KAAKC,MAAQF,EAAEC,KAAKC,OAAe,EACrCF,EAAEC,KAAKC,MAAQH,EAAEE,KAAKC,MAAc,EAEjC,KAYP,EAAKC,SAAS,CACZR,kBAAmBE,EACnBJ,SAAS,M,EAKfW,aAAe,SAACC,GACdA,EAAMC,iBACN,EAAKC,mB,EAGPC,kBAAoB,SAACH,GAAW,IAAD,EACLA,EAAMI,OAAtBR,EADqB,EACrBA,KAAMS,EADe,EACfA,MACd,EAAKP,SAAL,eACGF,EAAOS,K,EAIZH,gBAAkB,WAChB,IAAMI,EAAa,EAAKpB,MAAMC,OAAOoB,cACrC,EAAKT,SAAS,CACZR,kBAAmB,EAAKJ,MAAMG,UAAUmB,QAAO,SAACC,GAAD,OAC7CA,EAASb,KAAKC,MAAMU,cAAcG,SAASJ,S,kEAzD5B,IAAD,OAElBK,IAAMC,IAAI,yCAAyCC,MAAK,SAACC,GACvDC,QAAQC,IAAIF,GACZ,EAAKhB,SAAS,CACZT,UAAWyB,EAASG,KAAKC,QACzB5B,kBAAmBwB,EAASG,KAAKC,e,+BAyDrC,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,YACb,0BAAMC,SAAUC,KAAKtB,cACnB,yBAAKoB,UAAU,cACb,2BACEG,KAAK,OACLH,UAAU,eACVI,YAAY,SACZ3B,KAAK,SACLS,MAAOgB,KAAKnC,MAAMC,OAClBqC,SAAUH,KAAKlB,oBAEjB,4BAAQmB,KAAK,SAASH,UAAU,mBAAhC,aAMN,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,2BAAOA,UAAU,uBACf,+BACE,4BACE,wBAAIM,MAAM,OAAV,SACA,wBAAIA,MAAM,MAAMC,QAASL,KAAK9B,eAA9B,QAGA,wBAAIkC,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SAGJ,+BACGJ,KAAKnC,MAAMI,kBAAkBqC,KAAI,SAAClB,GAAD,OAChC,4BACE,wBAAIgB,MAAM,OAAOhB,EAASmB,QAAQC,WAClC,4BAAKpB,EAASb,KAAKC,OACnB,4BAAKY,EAASqB,OACd,4BAAKrB,EAASsB,OACd,4BAAKtB,EAASuB,IAAIC,mB,GA/GnBC,aCQJC,EARH,WACV,OACE,6BACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.0f2bfa4b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass Home extends Component {\n  state = {\n    search: \"\",\n    sortAsc: true,\n    employees: [],\n    filteredEmployees: [],\n  };\n\n  componentDidMount() {\n    // this.sortEmployees();\n    axios.get(\"https://randomuser.me/api/?results=30\").then((response) => {\n      console.log(response);\n      this.setState({\n        employees: response.data.results,\n        filteredEmployees: response.data.results,\n      });\n    });\n  }\n\n  sortEmployees = () => {\n    function compareAsc(a, b) {\n      if (a.name.first > b.name.first) return 1;\n      if (b.name.first > a.name.first) return -1;\n\n      return 0;\n    }\n    function compareDesc(a, b) {\n      if (a.name.first > b.name.first) return -1;\n      if (b.name.first > a.name.first) return 1;\n\n      return 0;\n    }\n    if (this.state.sortAsc) {\n      const sortedEmployees = this.state.filteredEmployees.sort(compareAsc);\n      // console.log(sortedEmployees);\n      this.setState({\n        filteredEmployees: sortedEmployees,\n        sortAsc: false,\n      });\n    } else {\n      const sortedEmployees = this.state.filteredEmployees.sort(compareDesc);\n      // console.log(sortedEmployees);\n      this.setState({\n        filteredEmployees: sortedEmployees,\n        sortAsc: true,\n      });\n    }\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.filterEmployees();\n  };\n\n  handleInputChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  filterEmployees = () => {\n    const searchTerm = this.state.search.toLowerCase();\n    this.setState({\n      filteredEmployees: this.state.employees.filter((employee) =>\n        employee.name.first.toLowerCase().includes(searchTerm)\n      ),\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"col-sm-8\">\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"form-group\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Search\"\n                name=\"search\"\n                value={this.state.search}\n                onChange={this.handleInputChange}\n              />\n              <button type=\"submit\" className=\"btn btn-primary\">\n                Search\n              </button>\n            </div>\n          </form>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <table className=\"table table-striped\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">Image</th>\n                  <th scope=\"col\" onClick={this.sortEmployees}>\n                    Name\n                  </th>\n                  <th scope=\"col\">Phone</th>\n                  <th scope=\"col\">Email</th>\n                  <th scope=\"col\">DOB</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.filteredEmployees.map((employee) => (\n                  <tr>\n                    <th scope=\"row\">{employee.picture.thumbnail}</th>\n                    <td>{employee.name.first}</td>\n                    <td>{employee.phone}</td>\n                    <td>{employee.email}</td>\n                    <td>{employee.dob.date}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from \"react\";\nimport Home from \"./containers/Home\";\n\nconst App = () => {\n  return (\n    <div>\n      <Home />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}